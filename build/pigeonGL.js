!function(t){var e={};function i(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(n,a,function(e){return t[e]}.bind(null,a));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=9)}([function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function i(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=function(){function t(e){a()(this,t),this.layers=[];for(var i in this._userConfig=e,e)this[i]=e[i]}return s()(t,[{key:"on",value:function(t,e){void 0===this._listeners&&(this._listeners={});var i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)}},{key:"fire",value:function(t,e){if(void 0!==this._listeners){var i=this._listeners[t];if(void 0!==i)for(var n=i.slice(0),a=0,r=n.length;a<r;a++)n[a].call(this,e)}}},{key:"off",value:function(t,e){if(void 0!==this._listeners){var i=this._listeners[t];if(void 0!==i)if(e){var n=i.indexOf(e);-1!==n&&i.splice(n,1)}else this._listeners[t]=[]}}},{key:"initConfig",value:function(t){}},{key:"onAdd",value:function(t){this.pigeonMap=t}},{key:"update",value:function(){}},{key:"onRemove",value:function(){this._listeners&&(this._listeners=[])}},{key:"addLayer",value:function(t){t.id=++this._layerid,this.layers.push(t),t.onAdd(this)}},{key:"removeLayer",value:function(t){for(var e in this.layers)if(this.layers[e].id==t.id)return this.layers[e].onRemove(),void this.layers.splice(e,1)}},{key:"getLayerById",value:function(t){for(var e=0;e<this.layers.length;e++)if(this.layer.id===t)return layer}}]),t}();e.default=o},function(t,e,i){var n=i(6),a=i(13);t.exports=function(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?a(t):e}},function(t,e){function i(e){return t.exports=i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},i(e)}t.exports=i},function(t,e,i){var n=i(14);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&n(t,e)}},function(t,e){function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(e){return"function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?t.exports=n=function(t){return i(t)}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":i(t)},n(e)}t.exports=n},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=(i(8),i(15)),h=function(){function t(e){a()(this,t),this.scope=e,this.map=e.map,this.camera=e.camera,this.active=!0,this.world=e.world||new THREE.Group,this.world.position.x=this.world.position.y=0,this.camera.matrixAutoUpdate=!1,this.update()}return s()(t,[{key:"update",value:function(t){this.map=Object.assign(this.map,t),this.initMapTransform(),this.updateCamera()}},{key:"listenMapChange",value:function(){this.update(this.map)}},{key:"initMapTransform",value:function(){var t={};t.width=this.map.width,t.height=this.map.height,t.zHeight=this.map.zHeight||0,t.x=this.map.center[0],t.y=this.map.center[1],t.z=this.map.center[2]||this.getZ(this.map.zoom),t._pitch=this.map.pitch*Math.PI/180||0,t.angle=this.map.rotation*Math.PI/180||0,this.map.transform=t}},{key:"getZ",value:function(t){return t}},{key:"setCenter",value:function(t){this.map.center=t,this.initMapTransform()}},{key:"setRotation",value:function(t){this.map.rotation=t,this.map.transform.angle=this.map.rotation*Math.PI/180}},{key:"setPitch",value:function(t){this.map.pitch=t,this.map.transform._pitch=this.map.pitch*Math.PI/180}},{key:"updateCamera",value:function(t){var e=Math.abs(this.map.transform.z)+this.map.transform.zHeight,i=this.map.fov||.6435011087932844,n=e,a=i/2,r=Math.PI/2+this.map.transform._pitch,s=Math.sin(a)*n/Math.sin(Math.PI-r-a),h=1.01*(Math.cos(Math.PI/2-this.map.transform._pitch)*s+n);this.camera.projectionMatrix=o.makePerspectiveMatrix(i,this.map.transform.width/this.map.transform.height,1,h);var u=new THREE.Matrix4,l=(new THREE.Matrix4).makeTranslation(0,0,e),p=(new THREE.Matrix4).makeRotationX(this.map.transform._pitch),c=(new THREE.Matrix4).makeRotationZ(this.map.transform.angle);u.premultiply(l).premultiply(p).premultiply(c),this.camera.matrixWorld.copy(u),this.world.position.x=-this.map.transform.x,this.world.position.y=-this.map.transform.y}}]),t}();e.default=h},function(t,e){var i=512*Math.pow(2,0);t.exports={WORLD_SIZE_RATIO:0,WORLD_SIZE:i,PROJECTION_WORLD_SIZE:i/(6378137*Math.PI)/2,MERCATOR_A:6378137,DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,EARTH_CIRCUMFERENCE:40075e3,DISTANCE:200}},function(t,e,i){var n={MTLLoader:i(10),OBJLoader:i(11),Map:i(12).default,Layer:i(2).default,CameraControl:i(7).default,ThirdPersonView:i(16).default,MapControl:i(17).default,TextLayer:i(18).default,VRLayer:i(19).default,CloudPoints:i(20).default};window.PigeonGL=n},function(t,e){var i=function(t){this.manager=void 0!==t?t:THREE.DefaultLoadingManager};i.prototype={constructor:i,load:function(t,e,i,n){var a=this,r=new THREE.FileLoader(this.manager);r.setPath(this.path),r.load(t,(function(t){e(a.parse(t))}),i,n)},setPath:function(t){this.path=t},setTexturePath:function(t){this.texturePath=t},setBaseUrl:function(t){console.warn("THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead."),this.setTexturePath(t)},setCrossOrigin:function(t){this.crossOrigin=t},setMaterialOptions:function(t){this.materialOptions=t},parse:function(t){for(var e=t.split("\n"),n={},a=/\s+/,r={},s=0;s<e.length;s++){var o=e[s];if(0!==(o=o.trim()).length&&"#"!==o.charAt(0)){var h=o.indexOf(" "),u=h>=0?o.substring(0,h):o;u=u.toLowerCase();var l=h>=0?o.substring(h+1):"";if(l=l.trim(),"newmtl"===u)n={name:l},r[l]=n;else if(n)if("ka"===u||"kd"===u||"ks"===u){var p=l.split(a,3);n[u]=[parseFloat(p[0]),parseFloat(p[1]),parseFloat(p[2])]}else n[u]=l}}var c=new i.MaterialCreator(this.texturePath||this.path,this.materialOptions);return c.setCrossOrigin(this.crossOrigin),c.setManager(this.manager),c.setMaterials(r),c}},(i.MaterialCreator=function(t,e){this.baseUrl=t||"",this.options=e,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:THREE.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:THREE.RepeatWrapping}).prototype={constructor:i.MaterialCreator,setCrossOrigin:function(t){this.crossOrigin=t},setManager:function(t){this.manager=t},setMaterials:function(t){this.materialsInfo=this.convert(t),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(t){if(!this.options)return t;var e={};for(var i in t){var n=t[i],a={};for(var r in e[i]=a,n){var s=!0,o=n[r],h=r.toLowerCase();switch(h){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(o=[o[0]/255,o[1]/255,o[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===o[0]&&0===o[1]&&0===o[2]&&(s=!1)}s&&(a[h]=o)}}return e},preload:function(){for(var t in this.materialsInfo)this.create(t)},getIndex:function(t){return this.nameLookup[t]},getAsArray:function(){var t=0;for(var e in this.materialsInfo)this.materialsArray[t]=this.create(e),this.nameLookup[e]=t,t++;return this.materialsArray},create:function(t){return void 0===this.materials[t]&&this.createMaterial_(t),this.materials[t]},createMaterial_:function(t){var e=this,i=this.materialsInfo[t],n={name:t,side:this.side};function a(t,i){if(!n[t]){var a,r,s=e.getTextureParams(i,n),o=e.loadTexture((a=e.baseUrl,"string"!=typeof(r=s.url)||""===r?"":/^https?:\/\//i.test(r)?r:a+r));o.repeat.copy(s.scale),o.offset.copy(s.offset),o.wrapS=e.wrap,o.wrapT=e.wrap,n[t]=o}}for(var r in i){var s=i[r];if(""!==s)switch(r.toLowerCase()){case"kd":n.color=(new THREE.Color).fromArray(s);break;case"ks":n.specular=(new THREE.Color).fromArray(s);break;case"map_kd":a("map",s);break;case"map_ks":a("specularMap",s);break;case"map_bump":case"bump":a("bumpMap",s);break;case"ns":n.shininess=parseFloat(s);break;case"d":s<1&&(n.opacity=s,n.transparent=!0);break;case"Tr":s>0&&(n.opacity=1-s,n.transparent=!0)}}return this.materials[t]=new THREE.MeshPhongMaterial(n),this.materials[t]},getTextureParams:function(t,e){var i,n={scale:new THREE.Vector2(1,1),offset:new THREE.Vector2(0,0)},a=t.split(/\s+/);return(i=a.indexOf("-bm"))>=0&&(e.bumpScale=parseFloat(a[i+1]),a.splice(i,2)),(i=a.indexOf("-s"))>=0&&(n.scale.set(parseFloat(a[i+1]),parseFloat(a[i+2])),a.splice(i,4)),(i=a.indexOf("-o"))>=0&&(n.offset.set(parseFloat(a[i+1]),parseFloat(a[i+2])),a.splice(i,4)),n.url=a.join(" ").trim(),n},loadTexture:function(t,e,i,n,a){var r,s=THREE.Loader.Handlers.get(t),o=void 0!==this.manager?this.manager:THREE.DefaultLoadingManager;return null===s&&(s=new THREE.TextureLoader(o)),s.setCrossOrigin&&s.setCrossOrigin(this.crossOrigin),r=s.load(t,i,n,a),void 0!==e&&(r.mapping=e),r}},t.exports=i},function(t,e){var i=function(t){this.manager=void 0!==t?t:THREE.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}};i.prototype={constructor:i,load:function(t,e,i,n){var a=this,r=new THREE.FileLoader(a.manager);r.setPath(this.path),r.load(t,(function(t){e(a.parse(t))}),i,n)},setPath:function(t){this.path=t},setMaterials:function(t){this.materials=t},_createParserState:function(){var t={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);var i=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||"",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(t,e){var i=this._finalize(!1);i&&(i.inherited||i.groupCount<=0)&&this.materials.splice(i.index,1);var n={index:this.materials.length,name:t||"",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:"",smooth:void 0!==i?i.smooth:this.smooth,groupStart:void 0!==i?i.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){var e={index:"number"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){var e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(var i=this.materials.length-1;i>=0;i--)this.materials[i].groupCount<=0&&this.materials.splice(i,1);return t&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),e}},i&&i.name&&"function"==typeof i.clone){var n=i.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){var i=parseInt(t,10);return 3*(i>=0?i-1:i+e/3)},parseNormalIndex:function(t,e){var i=parseInt(t,10);return 3*(i>=0?i-1:i+e/3)},parseUVIndex:function(t,e){var i=parseInt(t,10);return 2*(i>=0?i-1:i+e/2)},addVertex:function(t,e,i){var n=this.vertices,a=this.object.geometry.vertices;a.push(n[t+0]),a.push(n[t+1]),a.push(n[t+2]),a.push(n[e+0]),a.push(n[e+1]),a.push(n[e+2]),a.push(n[i+0]),a.push(n[i+1]),a.push(n[i+2])},addVertexLine:function(t){var e=this.vertices,i=this.object.geometry.vertices;i.push(e[t+0]),i.push(e[t+1]),i.push(e[t+2])},addNormal:function(t,e,i){var n=this.normals,a=this.object.geometry.normals;a.push(n[t+0]),a.push(n[t+1]),a.push(n[t+2]),a.push(n[e+0]),a.push(n[e+1]),a.push(n[e+2]),a.push(n[i+0]),a.push(n[i+1]),a.push(n[i+2])},addUV:function(t,e,i){var n=this.uvs,a=this.object.geometry.uvs;a.push(n[t+0]),a.push(n[t+1]),a.push(n[e+0]),a.push(n[e+1]),a.push(n[i+0]),a.push(n[i+1])},addUVLine:function(t){var e=this.uvs,i=this.object.geometry.uvs;i.push(e[t+0]),i.push(e[t+1])},addFace:function(t,e,i,n,a,r,s,o,h,u,l,p){var c,d=this.vertices.length,f=this.parseVertexIndex(t,d),m=this.parseVertexIndex(e,d),v=this.parseVertexIndex(i,d);if(void 0===n?this.addVertex(f,m,v):(c=this.parseVertexIndex(n,d),this.addVertex(f,m,c),this.addVertex(m,v,c)),void 0!==a){var y=this.uvs.length;f=this.parseUVIndex(a,y),m=this.parseUVIndex(r,y),v=this.parseUVIndex(s,y),void 0===n?this.addUV(f,m,v):(c=this.parseUVIndex(o,y),this.addUV(f,m,c),this.addUV(m,v,c))}if(void 0!==h){var g=this.normals.length;f=this.parseNormalIndex(h,g),m=h===u?f:this.parseNormalIndex(u,g),v=h===l?f:this.parseNormalIndex(l,g),void 0===n?this.addNormal(f,m,v):(c=this.parseNormalIndex(p,g),this.addNormal(f,m,c),this.addNormal(m,v,c))}},addLineGeometry:function(t,e){this.object.geometry.type="Line";for(var i=this.vertices.length,n=this.uvs.length,a=0,r=t.length;a<r;a++)this.addVertexLine(this.parseVertexIndex(t[a],i));var s=0;for(r=e.length;s<r;s++)this.addUVLine(this.parseUVIndex(e[s],n))}};return t.startObject("",!1),t},parse:function(t){var e=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var i=t.split("\n"),n="",a="",r="",s=[],o="function"==typeof"".trimLeft,h=0,u=i.length;h<u;h++)if(n=i[h],0!==(n=o?n.trimLeft():n.trim()).length&&"#"!==(a=n.charAt(0)))if("v"===a)if(" "===(r=n.charAt(1))&&null!==(s=this.regexp.vertex_pattern.exec(n)))e.vertices.push(parseFloat(s[1]),parseFloat(s[2]),parseFloat(s[3]));else if("n"===r&&null!==(s=this.regexp.normal_pattern.exec(n)))e.normals.push(parseFloat(s[1]),parseFloat(s[2]),parseFloat(s[3]));else{if("t"!==r||null===(s=this.regexp.uv_pattern.exec(n)))throw new Error("Unexpected vertex/normal/uv line: '"+n+"'");e.uvs.push(parseFloat(s[1]),parseFloat(s[2]))}else if("f"===a)if(null!==(s=this.regexp.face_vertex_uv_normal.exec(n)))e.addFace(s[1],s[4],s[7],s[10],s[2],s[5],s[8],s[11],s[3],s[6],s[9],s[12]);else if(null!==(s=this.regexp.face_vertex_uv.exec(n)))e.addFace(s[1],s[3],s[5],s[7],s[2],s[4],s[6],s[8]);else if(null!==(s=this.regexp.face_vertex_normal.exec(n)))e.addFace(s[1],s[3],s[5],s[7],void 0,void 0,void 0,void 0,s[2],s[4],s[6],s[8]);else{if(null===(s=this.regexp.face_vertex.exec(n)))throw new Error("Unexpected face line: '"+n+"'");e.addFace(s[1],s[2],s[3],s[4])}else if("l"===a){var l=n.substring(1).trim().split(" "),p=[],c=[];if(-1===n.indexOf("/"))p=l;else for(var d=0,f=l.length;d<f;d++){var m=l[d].split("/");""!==m[0]&&p.push(m[0]),""!==m[1]&&c.push(m[1])}e.addLineGeometry(p,c)}else if(null!==(s=this.regexp.object_pattern.exec(n))){var v=(" "+s[0].substr(1).trim()).substr(1);e.startObject(v)}else if(this.regexp.material_use_pattern.test(n))e.object.startMaterial(n.substring(7).trim(),e.materialLibraries);else if(this.regexp.material_library_pattern.test(n))e.materialLibraries.push(n.substring(7).trim());else{if(null===(s=this.regexp.smoothing_pattern.exec(n))){if("\0"===n)continue;throw new Error("Unexpected line: '"+n+"'")}var y=s[1].trim().toLowerCase();e.object.smooth="1"===y||"on"===y,(P=e.object.currentMaterial())&&(P.smooth=e.object.smooth)}e.finalize();var g=new THREE.Group;g.materialLibraries=[].concat(e.materialLibraries);for(h=0,u=e.objects.length;h<u;h++){var x=e.objects[h],E=x.geometry,b=x.materials,w="Line"===E.type;if(0!==E.vertices.length){var M=new THREE.BufferGeometry;M.addAttribute("position",new THREE.BufferAttribute(new Float32Array(E.vertices),3)),E.normals.length>0?M.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(E.normals),3)):M.computeVertexNormals(),E.uvs.length>0&&M.addAttribute("uv",new THREE.BufferAttribute(new Float32Array(E.uvs),2));for(var T,R=[],k=0,_=b.length;k<_;k++){var L=b[k],P=void 0;if(null!==this.materials&&(P=this.materials.create(L.name),w&&P&&!(P instanceof THREE.LineBasicMaterial))){var C=new THREE.LineBasicMaterial;C.copy(P),C.lights=!1,P=C}P||((P=w?new THREE.LineBasicMaterial:new THREE.MeshPhongMaterial).name=L.name),P.flatShading=L.smooth?THREE.SmoothShading:THREE.FlatShading,R.push(P)}if(R.length>1){for(k=0,_=b.length;k<_;k++){L=b[k];M.addGroup(L.groupStart,L.groupCount,k)}var j=new THREE.MultiMaterial(R);T=w?new THREE.LineSegments(M,j):new THREE.Mesh(M,j)}else T=w?new THREE.LineSegments(M,R[0]):new THREE.Mesh(M,R[0]);T.name=x.name,g.add(T)}}return g}},t.exports=i},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(3),h=i.n(o),u=i(4),l=i.n(u),p=i(5),c=i.n(p),d=i(7),f=i(2),m=i(8),v=function(t){function e(t){var i;return a()(this,e),(i=h()(this,l()(e).call(this)))._layerid=0,i.zIndex=1e3,i.status="running",i.type="gps",i.layers=[],i.clock=new THREE.Clock,i.clock.start(),i.initMap(t),i.initWorld(),i.map.hasGround&&i.addGround(),i.update(),i}return c()(e,t),s()(e,[{key:"initMap",value:function(t){this.map=Object.assign({rotation:0,width:1e3,height:600,pitch:45,zoom:21,center:[0,0]},t)}},{key:"initWorld",value:function(){this.renderer=new THREE.WebGLRenderer(Object.assign({alpha:!0,antialias:!0},this.map.rendererOptions)),this.renderer.setSize(this.map.width,this.map.height),this.map.container.appendChild(this.renderer.domElement),this.renderer.domElement.style.position="relative",this.renderer.domElement.style["pointer-events"]="none",this.renderer.domElement.style["z-index"]=++this.zIndex,this.scene=new THREE.Scene(Object.assign({},this.map.sceneOptions||{})),this.camera=new THREE.PerspectiveCamera(45,this.map.width/this.map.height,1e-6,5e9),this.layers=[],this.world=new THREE.Group,this.scene.add(this.world),this.camera.position.z=10,this.camera.position.x=this.map.center[0],this.camera.position.y=this.map.center[1],this.cameraControl=new d.default(this)}},{key:"moveTo",value:function(t,e){var i,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=n.preScale;return t.userData.isGeoGroup?i=t:t.parent&&t.parent.userData.isGeoGroup&&(i=t.parent),i.scale.copy(a||1),i.position.copy(this.projectToWorld(e)),t.coordinates=e,t}},{key:"update",value:function(){var t,e=this,i=this.clock.getDelta();for(var n in this.layers)this.layers[n].update&&this.layers[n].update(i);this.renderer.render(this.scene,this.camera),(t=this.renderer.vr.getDevice())?this.animationframe=t.requestAnimationFrame((function(t){"stop"!=e.status&&e.update(i,t)})):this.animationframe=requestAnimationFrame((function(t){"stop"!=e.status&&e.update(i,t)}))}},{key:"projectToWorld",value:function(t){return{x:t[0],y:t[1],z:t[2]||0}}},{key:"unprojectFromWorld",value:function(t){return[t.x,t.y,t.z]}},{key:"projectToScreen",value:function(t){var e=Object.assign({},t);e[1]=-e[1];var i=this.projectToWorld(e),n=this.world.getWorldPosition().clone().add(i).project(this.camera),a=this.map.width/2,r=this.map.height/2;return{x:Math.round(n.x*a+a),y:this.map.height-Math.round(n.y*r+r)}}},{key:"unprojectFromScreen",value:function(t){var e=this.map.width/2,i=this.map.height/2,n=-(t.x-e)/e,a=(this.map.height-t.y-i)/i,r=new THREE.Vector3(n,a,0).unproject(this.camera),s=this.world.getWorldPosition().clone(),o=this.unprojectFromWorld(r.sub(s));return o[1]=-o[1],o}},{key:"add",value:function(t,e,i){var n=new THREE.Group;return n.userData.isGeoGroup=!0,n.add(t),this.world.add(n),this.moveTo(t,e,i),t}},{key:"addGround",value:function(){var t=new THREE.PlaneGeometry(m.WORLD_SIZE,m.WORLD_SIZE),e=new THREE.MeshPhongMaterial({color:this.map.groundColor||6710886,shininess:30}),i=new THREE.Mesh(t,e);i.position.z=-.01,this.addAtCoordinate(i,this.map.center,{scaleToLatitude:!0,preScale:100})}},{key:"remove",value:function(t){this.world.remove(t)}},{key:"setupDefaultLights",value:function(){this.scene.add(new THREE.AmbientLight(13421772));var t=new THREE.DirectionalLight(16777215,.5);t.position.set(0,800,1e3),t.matrixWorldNeedsUpdate=!0,this.world.add(t)}}]),e}(f.default);e.default=v},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e){function i(e,n){return t.exports=i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},i(e,n)}t.exports=i},function(t,e,i){"use strict";i.r(e),i.d(e,"prettyPrintMatrix",(function(){return r})),i.d(e,"makePerspectiveMatrix",(function(){return s})),i.d(e,"radify",(function(){return o})),i.d(e,"degreeify",(function(){return h}));var n=i(6),a=i.n(n);function r(t){for(var e=0;e<4;e++)t[e],t[e+4],t[e+8],t[e+12]}function s(t,e,i,n){var a=new THREE.Matrix4,r=1/Math.tan(t/2),s=1/(i-n);return a.elements[0]=r/e,a.elements[1]=0,a.elements[2]=0,a.elements[3]=0,a.elements[4]=0,a.elements[5]=r,a.elements[6]=0,a.elements[7]=0,a.elements[8]=0,a.elements[9]=0,a.elements[10]=(n+i)*s,a.elements[11]=-1,a.elements[12]=0,a.elements[13]=0,a.elements[14]=2*n*i*s,a.elements[15]=0,a}function o(t){return"object"===a()(t)?t.map((function(t){return 2*Math.PI*t/360})):2*Math.PI*t/360}function h(t){return 360*t/(2*Math.PI)}},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(3),h=i.n(o),u=i(4),l=i.n(u),p=i(5),c=i.n(p),d=function(t){function e(t){var i;for(var n in a()(this,e),(i=h()(this,l()(e).call(this,t))).defaultParams={target:null,viewRotation:0,targetRotation:0,autoUpdate:!1,lockRotation:!0},i.defaultParams)void 0===i[n]&&(i[n]=i.defaultParams[n]);return i}return c()(e,t),s()(e,[{key:"onAdd",value:function(t){this.pigeonMap=t,this.initCamera()}},{key:"initCamera",value:function(){}},{key:"update",value:function(){this.autoUpdate&&this.updateCamera()}},{key:"updateCamera",value:function(t){if(!this.target)return!1;var e=this.target.coordinates;this.lockRotation&&(t||(t=180*this.target.rotation.z/Math.PI+this.targetRotation+this.viewRotation),this.pigeonMap.cameraControl.setRotation(t)),this.pigeonMap.cameraControl.setCenter(e),this.pigeonMap.cameraControl.updateCamera()}}]),e}(i(2).default);e.default=d},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(3),h=i.n(o),u=i(4),l=i.n(u),p=i(5),c=i.n(p),d=function(t){function e(t){var i;for(var n in a()(this,e),(i=h()(this,l()(e).call(this,t))).defaultParams={zoomBase:600,moveSpeed:1,pitchSpeed:.1,rotateSpeed:.15},i.defaultParams)void 0===i[n]&&(i[n]=i.defaultParams[n]);return i}return c()(e,t),s()(e,[{key:"onAdd",value:function(t){var e=this;this.pigeonMap=t,this.map=this.pigeonMap.map,this.cameraControl=this.pigeonMap.cameraControl,this.initConfig(),this.listenEvents(),this.on("change",(function(){e.pigeonMap.fire("change"),e.cameraControl.update()}))}},{key:"initConfig",value:function(){}},{key:"listenEvents",value:function(){var t=this;this.onDown=function(e){0==e.button?t.mouseStatus="left":2==e.button&&(t.mouseStatus="right"),t.mouseDownPosition={x:e.clientX,y:e.clientY},t.map.container.addEventListener("mousemove",t.onMove)},this.onUp=function(e){t.mouseStatus=!1,t.map.container.removeEventListener("mousemove",t.onMove)},this.onMove=function(e){if(t.mouseStatus){if("left"==t.mouseStatus){var i=e.clientY-t.mouseDownPosition.y,n=e.clientX-t.mouseDownPosition.x,a=Math.sqrt(Math.pow(n,2)+Math.pow(i,2));if(a<.1)return!1;var r=(n>0?-1:1)*Math.asin(i/a)+t.map.transform.angle,s=t.moveSpeed*(t.map.zoom/(t.zoomBase+t.map.zoom));t.map.center[0]+=(n>0?-1:1)*(a*Math.cos(r))*s,t.map.center[1]+=(n>0?-1:1)*(a*Math.sin(r))*s,t.cameraControl.update(),t.fire("move",e),t.fire("change",e)}else"right"==t.mouseStatus&&(t.map.pitch+=t.pitchSpeed*(e.clientY-t.mouseDownPosition.y),t.map.pitch>90?t.map.pitch=90:t.map.pitch<0&&(t.map.pitch=0),t.map.rotation-=t.rotateSpeed*(e.clientX-t.mouseDownPosition.x),t.cameraControl.update(),t.fire("rotate",e),t.fire("change",e));t.mouseDownPosition={x:e.clientX,y:e.clientY}}},this.onWheel=function(e){if(t.map.zoom-=e.deltaY*t.map.zoom/t.zoomBase,t.map.zoom<5)return t.map.zoom=5;t.cameraControl.update(),e.preventDefault(),t.fire("zoom",e),t.fire("change",e)},this.onContextmenu=function(t){t.preventDefault(),t.stopPropagation()},this.map.container.addEventListener("mousedown",this.onDown),this.map.container.addEventListener("mouseup",this.onUp),this.map.container.addEventListener("mousemove",this.onMove),this.map.container.addEventListener("wheel",this.onWheel),this.map.container.addEventListener("contextmenu",this.onContextmenu)}},{key:"removeListenr",value:function(){this.map.container.removeEventListener("mousedown",this.onDown),this.map.container.removeEventListener("mouseup",this.onUp),this.map.container.removeEventListener("mousemove",this.onMove),this.map.container.removeEventListener("wheel",this.onWheel),this.map.container.removeEventListener("contextmenu",this.onContextmenu)}}]),e}(i(2).default);e.default=d},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(3),h=i.n(o),u=i(4),l=i.n(u),p=i(5),c=i.n(p),d=function(t){function e(t){var i;for(var n in a()(this,e),(i=h()(this,l()(e).call(this,t))).defaultParams={fontSize:"14px",color:"#000000",canvasRender:!1},i.texts=[],i.textId=0,i.defaultParams)void 0===i[n]&&(i[n]=i.defaultParams[n]);return i}return c()(e,t),s()(e,[{key:"onAdd",value:function(t){this.pigeonMap=t,this.canvasRender?this.initCanvas():this.initDom();var e=this;function i(){e.updateText()}this.change=i,this.pigeonMap.on("change",i)}},{key:"initDom",value:function(){this.container=this.pigeonMap.map.container;var t=document.createElement("div");t.id="text_layer_"+this.id,t.className="pigeonGL-text-layer",t.setAttribute("width",this.pigeonMap.map.width),t.setAttribute("height",this.pigeonMap.map.height),t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.zIndex=++this.pigeonMap.zIndex,this.dom=t,this.container.appendChild(t)}},{key:"initCanvas",value:function(){this.container=this.pigeonMap.map.container;var t=document.createElement("canvas");t.id="text_layer_"+this.id,this.container.appendChild(t),t.setAttribute("width",this.pigeonMap.map.width),t.setAttribute("height",this.pigeonMap.map.height),t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.zIndex=++this.pigeonMap.zIndex,this.canvas=t}},{key:"addText",value:function(t){return(t=Object.assign({},t)).id=t.id||"_text_"+this.textId++,this.texts.push(t),t}},{key:"drawText",value:function(){this.canvasRender?this.drawCanvasText():this.drawDomText()}},{key:"drawDomText",value:function(){for(var t in this.dom.innerHTML="",this.texts){var e=this.pigeonMap.projectToScreen(this.texts[t].lnglat),i=document.createElement("span");for(var n in i.id=this.texts[t].id,i.innerHTML=this.texts[t].text,this.dom.appendChild(i),i.style.position="absolute",i.style.top=e.y+"px",i.style.left=e.x+"px",this.texts[t].style)i.style[n]=this.texts[t].style[n]}}},{key:"drawCanvasText",value:function(){var t=this.canvas.getContext("2d");for(var e in t.clearRect(0,0,this.canvas.width,this.canvas.height),this.texts){var i=this.pigeonMap.projectToScreen(this.texts[e].lnglat);t.font=this.texts[e].font||this.font,t.fillStyle=this.texts[e].color||this.color,t.fillText(this.texts[e].text,i.x,i.y)}}},{key:"updateDomText",value:function(){var t=this.dom.querySelectorAll("span");for(var e in this.texts){var i=this.pigeonMap.projectToScreen(this.texts[e].lnglat);t[e].style.top=i.y+"px",t[e].style.left=i.x+"px"}}},{key:"removeText",value:function(t){for(var e in this.texts)if(this.texts[e].id==t)return this.texts.splice(e,1),void this.drawText()}},{key:"update",value:function(){}},{key:"updateText",value:function(){this.canvasRender?this.drawCanvasText():this.updateDomText()}},{key:"getText",value:function(t){for(var e in this.texts)if(this.texts[e].id==t)return this.text[e]}},{key:"onRemove",value:function(){this.pigeonMap.off("change",this.change),this._listeners=null}},{key:"getTextIndex",value:function(t){for(var e in this.texts)if(this.texts[e].id==t)return e}}]),e}(i(2).default);e.default=d},function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return d}));var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(3),h=i.n(o),u=i(4),l=i.n(u),p=i(5),c=i.n(p),d=function(t){function e(t){var i;return a()(this,e),(i=h()(this,l()(e).call(this,t))).noVR=!1,i.vrStatus="not suppert VR",i.listenEvents(),i.getVRDisplays(),i}return c()(e,t),s()(e,[{key:"getVRDisplays",value:function(){var t=this;navigator.getVRDisplays&&navigator.getVRDisplays().then((function(e){e.length>0?(t.device=e[0],t.renderer.vr.enabled=!0,t.pigeonMap.renderer.vr.setDevice(t.device),t.frameData=new VRFrameData):(t.vrStatus="noDisplay",console.warn("no vr displays"))})).catch((function(t){console.warn("Unable to get VR Displays")}))}},{key:"listenEvents",value:function(){var t=this;window.addEventListener("vrdisplayconnect",(function(e){t.device=e.display||e.detail.display,t.status,t.renderer.vr.enabled=!0,t.fire("connected",t.device)}),!1),window.addEventListener("vrdisplaydisconnect",(function(e){t.status,t.renderer.vr.enabled=!1,t.fire("disconnet",t.device)}),!1),window.addEventListener("vrdisplaypresentchange",(function(e){t.device=e.display||e.detail.display,t.fire("statuschange",t.device)}),!1)}},{key:"enterVR",value:function(){this.device.requestPresent([{source:this.renderer.domElement}])}},{key:"exitVR",value:function(){this.device.exitPresent()}},{key:"createButton",value:function(t){var e=this;t||((t=document.createElement("button")).style.position="absolute",t.style.bottom="20px",t.style.padding="12px 6px",t.style.border="1px solid #fff",t.style.borderRadius="4px",t.style.background="transparent",t.style.color="#fff",t.style.textAlign="center",t.style.opacity="0.5",t.style.outline="none",t.style.zIndex="9999",t.style.cursor="auto",t.style.left="calc(50% - 75px)",t.style.width="150px",t.textContent="Enter VR",document.body.appendChild(t)),t.addEventListener("click",(function(){e.device&&e.enterVR()}))}},{key:"onAdd",value:function(t){this.pigeonMap=t,this.renderer=t.renderer,this.initVRRenderer()}},{key:"initVRRenderer",value:function(){}}]),e}(i(2).default)},function(t,e,i){"use strict";i.r(e);var n=i(0),a=i.n(n),r=i(1),s=i.n(r),o=i(3),h=i.n(o),u=i(4),l=i.n(u),p=i(5),c=i.n(p),d=function(t){function e(t){var i;return a()(this,e),(i=h()(this,l()(e).call(this,t))).lanePoints=[],i.initPoints(),i}return c()(e,t),s()(e,[{key:"initPoints",value:function(){this.material=new THREE.PointsMaterial({color:16777215,size:10}),this.pointsGeometry=new THREE.BufferGeometry,this.points=new THREE.Points(this.pointsGeometry,this.material)}},{key:"onAdd",value:function(t){this.pigeonMap=t,this.pigeonMap.world.add(this.points)}},{key:"drawPoints",value:function(t){this.baseLngLat=t[0],this.baseXYZ=this.pigeonMap.projectToWorld(this.baseLngLat);var e,i=[],n=[],a=[];for(var r in t)e=this.pigeonMap.projectToWorld(t[r]),i.push(e.x-this.baseXYZ.x,e.y-this.baseXYZ.y,e.z-this.baseXYZ.z),a.push(t[r]),n.push(r);this.points.geometry.addAttribute("position",new THREE.Float32BufferAttribute(i,3)),this.points.geometry.computeBoundingSphere(),this.points.position.x=this.baseXYZ.x,this.points.position.y=this.baseXYZ.y,this.points.position.z=this.baseXYZ.z}}]),e}(i(2).default);e.default=d}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,